From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: u9g <git@u9g.dev>
Date: Sat, 16 Jul 2022 01:43:16 -0400
Subject: [PATCH] Add TeleportResult


diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index a92755211e3d42934b5efaa3f201c6c19ab7d2b4..2ac8582a39c1257a975fc12960910d235c3626a4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -524,13 +524,13 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     // Paper start
     @Override
-    public java.util.concurrent.CompletableFuture<Boolean> teleportAsync(Location location, TeleportCause cause) {
+    public java.util.concurrent.CompletableFuture<dev.u9g.TeleportResult> sliver_teleportAsync(Location location, TeleportCause cause) { // Sliver - TeleportResult
         Preconditions.checkArgument(location != null, "location");
         location.checkFinite();
         Location locationClone = location.clone(); // clone so we don't need to worry about mutations after this call.
 
         net.minecraft.server.level.ServerLevel world = ((CraftWorld)locationClone.getWorld()).getHandle();
-        java.util.concurrent.CompletableFuture<Boolean> ret = new java.util.concurrent.CompletableFuture<>();
+        java.util.concurrent.CompletableFuture<dev.u9g.TeleportResult> ret = new java.util.concurrent.CompletableFuture<>(); // Sliver - TeleportResult
 
         world.loadChunksForMoveAsync(getHandle().getBoundingBoxAt(locationClone.getX(), locationClone.getY(), locationClone.getZ()), location.getX(), location.getZ(), (list) -> {
             net.minecraft.server.level.ServerChunkCache chunkProviderServer = world.getChunkSource();
@@ -539,7 +539,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             }
             net.minecraft.server.MinecraftServer.getServer().scheduleOnMain(() -> {
                 try {
-                    ret.complete(CraftEntity.this.teleport(locationClone, cause) ? Boolean.TRUE : Boolean.FALSE);
+                    ret.complete(CraftEntity.this.sliver_teleport(locationClone, cause)); // Sliver - TeleportResult
                 } catch (Throwable throwable) {
                     if (throwable instanceof ThreadDeath) {
                         throw (ThreadDeath)throwable;
@@ -553,19 +553,25 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
     // Paper end
 
+    @Override public dev.u9g.TeleportResult sliver_teleport(Location location) { return this.sliver_teleport(location, TeleportCause.PLUGIN); } // Sliver - TeleportResult
     @Override
     public boolean teleport(Location location) {
         return this.teleport(location, TeleportCause.PLUGIN);
     }
 
+    @Override public boolean teleport(Location location, TeleportCause cause) { return sliver_teleport(location, cause).isSuccessful(); } // Sliver - TeleportResult
     @Override
-    public boolean teleport(Location location, TeleportCause cause) {
+    public dev.u9g.TeleportResult sliver_teleport(Location location, TeleportCause cause) { // Sliver - TeleportResult
         Preconditions.checkArgument(location != null, "location");
         location.checkFinite();
 
-        if (this.entity.isVehicle() || this.entity.isRemoved()) {
-            return false;
-        }
+        // Sliver start - TeleportResult
+        //if (this.entity.isVehicle() || this.entity.isRemoved()) {
+        //    return false;
+        //}
+        if (this.entity.isVehicle()) return dev.u9g.TeleportResult.ENTITY_IN_VEHICLE;
+        else if (this.entity.isRemoved()) return dev.u9g.TeleportResult.ENTITY_IS_REMOVED;
+        // Sliver end
 
         // If this entity is riding another entity, we must dismount before teleporting.
         this.entity.stopRiding();
@@ -575,7 +581,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             // Prevent teleportation to an other world during world generation
             Preconditions.checkState(!entity.generation, "Cannot teleport entity to an other world during world generation");
             this.entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), new BlockPos(location.getX(), location.getY(), location.getZ()));
-            return true;
+            return dev.u9g.TeleportResult.SUCCESS; // Sliver - TeleportResult
         }
 
         // entity.setLocation() throws no event, and so cannot be cancelled
@@ -583,17 +589,19 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         // SPIGOT-619: Force sync head rotation also
         this.entity.setYHeadRot(location.getYaw());
 
-        return true;
+        return dev.u9g.TeleportResult.SUCCESS; // Sliver - TeleportResult
     }
 
+    @Override public boolean teleport(org.bukkit.entity.Entity destination) { return this.sliver_teleport(destination).isSuccessful(); } // Sliver - TeleportResult
     @Override
-    public boolean teleport(org.bukkit.entity.Entity destination) {
-        return this.teleport(destination.getLocation());
+    public dev.u9g.TeleportResult sliver_teleport(org.bukkit.entity.Entity destination) { // Sliver - TeleportResult
+        return this.sliver_teleport(destination.getLocation()); // Sliver - TeleportResult
     }
 
+    @Override public boolean teleport(org.bukkit.entity.Entity destination, TeleportCause cause) { return this.sliver_teleport(destination.getLocation(), cause).isSuccessful(); } // Sliver - TeleportResult
     @Override
-    public boolean teleport(org.bukkit.entity.Entity destination, TeleportCause cause) {
-        return this.teleport(destination.getLocation(), cause);
+    public dev.u9g.TeleportResult sliver_teleport(org.bukkit.entity.Entity destination, TeleportCause cause) { // Sliver - TeleportResult
+        return this.sliver_teleport(destination.getLocation(), cause); // Sliver - TeleportResult
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index c022751e3b45469cc0ad6732e2d6ff08918bafa4..ae5da253544b89eeffb153cfb131558e3d43fa5a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -627,15 +627,17 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
             return this.getHandle().bukkitPickUpLoot;
         }
     }
-
+    // Sliver start - TeleportResult
+    @Override public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) { return this.sliver_teleport(location, cause).isSuccessful(); }
     @Override
-    public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
+    public dev.u9g.TeleportResult sliver_teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
         if (this.getHealth() == 0) {
-            return false;
+            return dev.u9g.TeleportResult.ENTITY_IS_DEAD;
         }
 
-        return super.teleport(location, cause);
+        return super.sliver_teleport(location, cause);
     }
+    // Sliver end
 
     @Override
     public boolean isLeashed() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index ce78e024244c14530270b8276e5b0fd853f0a110..b439f90feaa2ff13cc987d3e677014010f8e2bb4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1123,33 +1123,47 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     // Paper start - Chunk priority
-    @Override
-    public java.util.concurrent.CompletableFuture<Boolean> teleportAsync(Location loc, @javax.annotation.Nonnull PlayerTeleportEvent.TeleportCause cause) {
+    // Sliver start - TeleportResult
+    @Override public java.util.concurrent.CompletableFuture<Boolean> teleportAsync(Location loc, @javax.annotation.Nonnull PlayerTeleportEvent.TeleportCause cause) {
+        java.util.concurrent.CompletableFuture<Boolean> ret = new java.util.concurrent.CompletableFuture<>();
+        this.sliver_teleportAsync(loc, cause).whenComplete((result, ex) -> {
+            if (ex != null) ret.completeExceptionally(ex);
+            if (result != null) ret.complete(result.isSuccessful());
+        });
+        return ret;
+    }
+    @Override
+    public java.util.concurrent.CompletableFuture<dev.u9g.TeleportResult> sliver_teleportAsync(Location loc, @javax.annotation.Nonnull PlayerTeleportEvent.TeleportCause cause) {
+        // Sliver end
         ((CraftWorld)loc.getWorld()).getHandle().getChunkSource().markAreaHighPriority(
             new net.minecraft.world.level.ChunkPos(net.minecraft.util.Mth.floor(loc.getX()) >> 4,
             net.minecraft.util.Mth.floor(loc.getZ()) >> 4), 28, 3); // Load area high priority
-        return super.teleportAsync(loc, cause);
+        return super.sliver_teleportAsync(loc, cause); // Sliver - TeleportResult
     }
     // Paper end
 
+    @Override public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) { return this.sliver_teleport(location, cause).isSuccessful(); } // Sliver - TeleportResult
     @Override
-    public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
+    public dev.u9g.TeleportResult sliver_teleport(Location location, PlayerTeleportEvent.TeleportCause cause) { // Sliver - TeleportResult
         Preconditions.checkArgument(location != null, "location");
         Preconditions.checkArgument(location.getWorld() != null, "location.world");
         location.checkFinite();
 
         ServerPlayer entity = this.getHandle();
-
-        if (this.getHealth() == 0 || entity.isRemoved()) {
-            return false;
-        }
+        // Sliver start - TeleportResult
+        //if (this.getHealth() == 0 || entity.isRemoved()) {
+        //    return false;
+        //}
+        if (this.getHealth() == 0) return dev.u9g.TeleportResult.ENTITY_IS_DEAD;
+        else if (this.entity.isRemoved()) return dev.u9g.TeleportResult.ENTITY_IS_REMOVED;
+        // Sliver end
 
         if (entity.connection == null) {
-           return false;
+           return dev.u9g.TeleportResult.PLAYER_DISCONNECTED; // Sliver - TeleportResult
         }
 
         if (entity.isVehicle()) {
-            return false;
+            return dev.u9g.TeleportResult.ENTITY_IN_VEHICLE; // Sliver - TeleportResult
         }
 
         // From = Players current Location
@@ -1162,7 +1176,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         // Return False to inform the Plugin that the Teleport was unsuccessful/cancelled.
         if (event.isCancelled()) {
-            return false;
+            return dev.u9g.TeleportResult.PLAYER_TELEPORT_CANCELLED; // Sliver - TeleportResult
         }
 
         // If this player is riding another entity, we must dismount before teleporting.
@@ -1192,7 +1206,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         } else {
             server.getHandle().respawn(entity, toWorld, true, to, !toWorld.paperConfig.disableTeleportationSuffocationCheck); // Paper
         }
-        return true;
+        return dev.u9g.TeleportResult.SUCCESS; // Sliver - TeleportResult
     }
 
     @Override
